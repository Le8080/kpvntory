Step by step guide
New Laravel via composer 

TO install a laravel via composer

	composer create-project --prefer-dist laravel/laravel [nameoffolder]

Serving or running the app
go to [nameoffolder]

	php artisan serve
	go to the link given ex. 127.0.0.1:8000
	

delete the folowing : vendor and composer lock

run composer install

Foldering
Programmin	 	--- Controllers
Models			-- App
			models		-- root
			controlers  -- http/controllers
Configuration	-- config
Assets			-- public folder
Views			-- resources
Unit test		-- test
app dependencies -- vendor
application routes -- routes/web.php
database		--database
	migration (help us create database structure)
	seed 	(help us fill our database data)

	

some command

php artisan serve
php artisan down
php artisan up
php artisan cache:clear


creating componets

	create controller  : php artisan make:controller [name of controller]
	create model : php artisan make:model [name of mode]
	migration : php artisan make:model Room -m
	
#type data can be return on responce
Route::get('/',function(){

	return '<h3></h3>'; #as string
	return view('welcome'); #as view
	
	$response_arr =[];
	$response_arr['au'] ='test;
	return $response_arr; 			#the array will convert to json response)
});


#Passing value to a view
Route::get('/',function(){
	$data = [];
	$data['test'] = '0.2.2';
	return view ('welcome',$data);
});
#onview page using
{{ $test }}

#Dependency Injection
	#adding class instance to another instance using the class constructor
	
			method	controllername@method
Route::get('/di','ClientController@di');

#service providers are the command center for bootstrapping
	#bootstrapping to register components to used within application s(service container, event listeners, middleware and routes)
	
php artisan make:provider [provider name]

#FACADEs provides simplified interface
easier too use, read, dependency, static interface to complex classes, shared singleton isntance


DB::selecet('');
Crypt::encrypt('2323');
Crypt::dencrypt('2323');
	
	
#controllers
php artisan make:controller [nameofcontroller]


routing controllers 

Route::get('/','Controllername@Methodname');
Route::post('/create','Controllername@Methodname'); #endingform
Route::put('/add','Controllername@Methodname'); #adding
Route::patch('/update','Controllername@Methodname'); #updating
Route::delete('/delete','Controllername@Methodname'); #deleting

#sendinf parameters to a controller

Route::get('/{parameterid}','Controllername@Methodname');

#view
index.blade.php
			[foldername/file]
return view('client/index');

#layouts
#create template and extend the views
#using a layouts
#inside the body insert
@yield('content')

#fix url assets using
href="{{assets(css/file.css)}}"

#add content to the body from different view file
#extend the content
		[folder.filename]
@extends('layouts.app');
@section ('content')
<h5>home</h5?
@endsection

#send data to the views

$o=new \stdclass;
$o->tett='';
$i=new \stdclass;
$i->tes='sd;
$data['ts'][]=$o;
$data['ts'][]=$i;
view('name',$data);

blade will help us simplify


Foreach on views
titles
@foreach($titles as $title)
	<li>{{ $title }}</li>		// {{mustache
#endforeach

#ifelse in views
{{ $modify == 1 ? 'Modify CLient' : 'New Client'}}

#Forms

<form action="{{ $modify == 1 ? route('update', ['id'=>1]) " route('create')">

#process form
CSRF or cross site request forgery

#go to verifyCSRFtoken.php;
protected $except = [
'*'
];

#go to the controler create/update
ex
public function newClient (Request $request){
$data =[ ];
$data['title'] = $request->input('title');
$data['name'] = $request->input('name');

	if($request->isMethod('post')){
		
	}
}

#validate data
$this->validate(
	$request,[
		'title'=>'required|min:5',
		'name' =>'required'
	]
);

#showing error on the FE
#using moustache syntax
{{ $erors->first('title') }}

#helper ex/
<input type ="Text" name = "title" value="{{ old('title') }}">

#ORM object-relational mapper
#on laravel it uses eloquent
#eloquent based on ActiveRecord
#Active record pattern wraps a database table into a class and an instance of that class to a single row
#any action performed on that object will be reflected on the databases.

#DATABASE CONFIG IS ON .env file
# .env - config the DB_HOST

#got to AppServiceProvider.php
#and add use Illuminate\Support\Facades\Schema;
public function boot(){
 //
	Schema::defaultStringLength(191) ;
}

#database migration - set of instructions to create database structure.

php artisan make:migration sample_migration_name --create=name
php artisan make:migration create_clients_table --create=clients


->Database->Migrations

Schema::create('rooms', function (Blueprint $table){
			[column type][columnname]
	$table->increments('id');
	$table->string('title');
	$table->string('name');
	$table->string('lastname');
	$table->date('date');
	$table->integer('client_id')->unsigned();
					[columnname]			[columnname][table toreference]
	$table->foreign('client_id')->references('id')->on('clients');
	$table->timestamps();
});


#HOW TO RUN THE MIGRATION
php artisan migrate

#create model
php artisan make:model [nameofmodel]


#testing if models work using tinker
php artisan tinker
>>> namespace App;
>>> $client = new Client();
=>App\Client {#706}

#get all records
>>>$clinet->all();

#getrecords with filter
>>>$client->where('id',1)->get();

#inserting record
>>>$client->insert([
'title'=>'dr',
'name'=>'mark',
'lastname'=>'hamilton',
'address'=>'test'
]);

#import models on controller
use App\Client;

add on function Client $client = like the Request $request
$client->insert($data);

#use eloquent to select data
Client $client
$this->client = $client;


$data['clients'] = $this->client->all;
#finding/getting record;
$client_Data = $this->client->find($clientid);

#using the fetchdata
$client_Data->title;
$client_Data->name;

{{ old('name') ? old('name') : $name }}

#using update
$client_data = $this->client->find($client_id);
$client_data->save();

#relations on Eloquent
#hasmany
public function reservations(){
	return $this->hasMany('\App\Reservations');
}
#on tinker to check
php artisan tinker
>>>namespace App;
>>> $client = new Client();

>>>$selected = $client->find(1);
>>>$selected->reservations();
>>>$selected->reservations()->get();

#belongsto
public function client()
{
return $this->belongsTo('App\Client','client_id', 'id');
}

#test
php artisan tinker
>>>namespace App;
>>>$reservation = new Reservations();
>>>$selected =>$reservation->find(1);
>>>$selected->client->get();

#on app ex Room.php aa
use Illuminate\Support\Facades\DB;

public function getAvailablerooms($startdate,$enddate){
	$availablerooms = DB::table('rooms as r)
								->select('r.id','r.name')
								->whereRaw("r.id NOT IN(
									SELECT b.room_id FROM reservations b where Not(b.date_out < '{$start_data}' OR
										b.date_in > '{$end_date}'
									)
								)")
								->where('room_id',$room_id) //sample regular whre only
								->orderBy('r.id');
								->get()
								;
	return $availablerooms;
}

#implementation on roomscontroller;
use App\Client;
use App\Rooms;
public function checkavail($client_id, Request $request){
	$dateFrom = $request->input('from');
	$dateto = $request->input('to');
	$client = new Client();
	$room = new Room();
	
	$data = []'
	$data['dateFrom'] = $dateFrom;
	$data['dateTo']	= $dateTo;
	$data['rooms'] = $room->getAvailablerooms($dateFrom,$dateTo);
	$data['client] = $client->find($client_id);
}

#implementing on views
{{$client->title}}
{{$client->title}}

@unless(empty($dateFrom)  || empty($datato))	//show the listing if the date is field out
	@foreach($rooms as $room)
	{{$room->name}}
	{{$room->date}}
	@endforeach
@endunless

#addingroute on view
ahref="{{ route('book_room',['client_id'=>$client->id]) }}"


ctr shft k


$reservation->client()->associate($client); //belongTO
$reservation->save();

return redirect()->route('clients');


#aborting

abort(405,"aborttest message");